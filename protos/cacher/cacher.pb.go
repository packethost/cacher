// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: cacher.proto

package cacher

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cacher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cacher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_cacher_proto_rawDescGZIP(), []int{0}
}

func (x *PushRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cacher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_cacher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_cacher_proto_rawDescGZIP(), []int{1}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MAC string `protobuf:"bytes,1,opt,name=MAC,proto3" json:"MAC,omitempty"`
	IP  string `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	ID  string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cacher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cacher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_cacher_proto_rawDescGZIP(), []int{2}
}

func (x *GetRequest) GetMAC() string {
	if x != nil {
		return x.MAC
	}
	return ""
}

func (x *GetRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *GetRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type Hardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSON string `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cacher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_cacher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_cacher_proto_rawDescGZIP(), []int{3}
}

func (x *Hardware) GetJSON() string {
	if x != nil {
		return x.JSON
	}
	return ""
}

var File_cacher_proto protoreflect.FileDescriptor

var file_cacher_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x41, 0x43, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x1e, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x53,
	0x4f, 0x4e, 0x32, 0xc2, 0x02, 0x0a, 0x06, 0x43, 0x61, 0x63, 0x68, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x79, 0x4d,
	0x41, 0x43, 0x12, 0x12, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x50,
	0x12, 0x12, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x44, 0x12, 0x12,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x0d, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x30, 0x01, 0x12, 0x26,
	0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x12, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x30, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x74,
	0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cacher_proto_rawDescOnce sync.Once
	file_cacher_proto_rawDescData = file_cacher_proto_rawDesc
)

func file_cacher_proto_rawDescGZIP() []byte {
	file_cacher_proto_rawDescOnce.Do(func() {
		file_cacher_proto_rawDescData = protoimpl.X.CompressGZIP(file_cacher_proto_rawDescData)
	})
	return file_cacher_proto_rawDescData
}

var file_cacher_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cacher_proto_goTypes = []interface{}{
	(*PushRequest)(nil), // 0: cacher.PushRequest
	(*Empty)(nil),       // 1: cacher.Empty
	(*GetRequest)(nil),  // 2: cacher.GetRequest
	(*Hardware)(nil),    // 3: cacher.Hardware
}
var file_cacher_proto_depIdxs = []int32{
	0, // 0: cacher.Cacher.Push:input_type -> cacher.PushRequest
	2, // 1: cacher.Cacher.ByMAC:input_type -> cacher.GetRequest
	2, // 2: cacher.Cacher.ByIP:input_type -> cacher.GetRequest
	2, // 3: cacher.Cacher.ByID:input_type -> cacher.GetRequest
	1, // 4: cacher.Cacher.All:input_type -> cacher.Empty
	1, // 5: cacher.Cacher.Ingest:input_type -> cacher.Empty
	2, // 6: cacher.Cacher.Watch:input_type -> cacher.GetRequest
	1, // 7: cacher.Cacher.Push:output_type -> cacher.Empty
	3, // 8: cacher.Cacher.ByMAC:output_type -> cacher.Hardware
	3, // 9: cacher.Cacher.ByIP:output_type -> cacher.Hardware
	3, // 10: cacher.Cacher.ByID:output_type -> cacher.Hardware
	3, // 11: cacher.Cacher.All:output_type -> cacher.Hardware
	1, // 12: cacher.Cacher.Ingest:output_type -> cacher.Empty
	3, // 13: cacher.Cacher.Watch:output_type -> cacher.Hardware
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cacher_proto_init() }
func file_cacher_proto_init() {
	if File_cacher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cacher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cacher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cacher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cacher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cacher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cacher_proto_goTypes,
		DependencyIndexes: file_cacher_proto_depIdxs,
		MessageInfos:      file_cacher_proto_msgTypes,
	}.Build()
	File_cacher_proto = out.File
	file_cacher_proto_rawDesc = nil
	file_cacher_proto_goTypes = nil
	file_cacher_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CacherClient is the client API for Cacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacherClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error)
	ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error)
	All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cacher_AllClient, error)
	Ingest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Watch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Cacher_WatchClient, error)
}

type cacherClient struct {
	cc grpc.ClientConnInterface
}

func NewCacherClient(cc grpc.ClientConnInterface) CacherClient {
	return &cacherClient{cc}
}

func (c *cacherClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cacher.Cacher/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacherClient) ByMAC(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/cacher.Cacher/ByMAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacherClient) ByIP(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/cacher.Cacher/ByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacherClient) ByID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Hardware, error) {
	out := new(Hardware)
	err := c.cc.Invoke(ctx, "/cacher.Cacher/ByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacherClient) All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cacher_AllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cacher_serviceDesc.Streams[0], "/cacher.Cacher/All", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacherAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cacher_AllClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type cacherAllClient struct {
	grpc.ClientStream
}

func (x *cacherAllClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacherClient) Ingest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cacher.Cacher/Ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacherClient) Watch(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Cacher_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cacher_serviceDesc.Streams[1], "/cacher.Cacher/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacherWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cacher_WatchClient interface {
	Recv() (*Hardware, error)
	grpc.ClientStream
}

type cacherWatchClient struct {
	grpc.ClientStream
}

func (x *cacherWatchClient) Recv() (*Hardware, error) {
	m := new(Hardware)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacherServer is the server API for Cacher service.
type CacherServer interface {
	Push(context.Context, *PushRequest) (*Empty, error)
	ByMAC(context.Context, *GetRequest) (*Hardware, error)
	ByIP(context.Context, *GetRequest) (*Hardware, error)
	ByID(context.Context, *GetRequest) (*Hardware, error)
	All(*Empty, Cacher_AllServer) error
	Ingest(context.Context, *Empty) (*Empty, error)
	Watch(*GetRequest, Cacher_WatchServer) error
}

// UnimplementedCacherServer can be embedded to have forward compatible implementations.
type UnimplementedCacherServer struct {
}

func (*UnimplementedCacherServer) Push(context.Context, *PushRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedCacherServer) ByMAC(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByMAC not implemented")
}
func (*UnimplementedCacherServer) ByIP(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByIP not implemented")
}
func (*UnimplementedCacherServer) ByID(context.Context, *GetRequest) (*Hardware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByID not implemented")
}
func (*UnimplementedCacherServer) All(*Empty, Cacher_AllServer) error {
	return status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (*UnimplementedCacherServer) Ingest(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (*UnimplementedCacherServer) Watch(*GetRequest, Cacher_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterCacherServer(s *grpc.Server, srv CacherServer) {
	s.RegisterService(&_Cacher_serviceDesc, srv)
}

func _Cacher_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacherServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacher.Cacher/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacherServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cacher_ByMAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacherServer).ByMAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacher.Cacher/ByMAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacherServer).ByMAC(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cacher_ByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacherServer).ByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacher.Cacher/ByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacherServer).ByIP(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cacher_ByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacherServer).ByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacher.Cacher/ByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacherServer).ByID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cacher_All_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacherServer).All(m, &cacherAllServer{stream})
}

type Cacher_AllServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type cacherAllServer struct {
	grpc.ServerStream
}

func (x *cacherAllServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

func _Cacher_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacherServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacher.Cacher/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacherServer).Ingest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cacher_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacherServer).Watch(m, &cacherWatchServer{stream})
}

type Cacher_WatchServer interface {
	Send(*Hardware) error
	grpc.ServerStream
}

type cacherWatchServer struct {
	grpc.ServerStream
}

func (x *cacherWatchServer) Send(m *Hardware) error {
	return x.ServerStream.SendMsg(m)
}

var _Cacher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cacher.Cacher",
	HandlerType: (*CacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Cacher_Push_Handler,
		},
		{
			MethodName: "ByMAC",
			Handler:    _Cacher_ByMAC_Handler,
		},
		{
			MethodName: "ByIP",
			Handler:    _Cacher_ByIP_Handler,
		},
		{
			MethodName: "ByID",
			Handler:    _Cacher_ByID_Handler,
		},
		{
			MethodName: "Ingest",
			Handler:    _Cacher_Ingest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "All",
			Handler:       _Cacher_All_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Cacher_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cacher.proto",
}
